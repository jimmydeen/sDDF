// RUN PREPROCESSOR FIRST BEFORE COMPILING ! (cpp <filename>)

// General macros
#define BBYTES64 8
#define BBYTES32 4
#define PTR_SIZE_BYTES BBYTES64
#define SYS_SIZE_BYTES BBYTES64
#define BYTE 8
#define BUFFSIZE 512
#define LOGBUFFSIZE 9  // log 512
#define BYTEMASK 255  // Mask to extract lower 8 bytes

// Offsets for ring_handle struct (64 bit members)

#define USED_OFF 0
#define AVAIL_OFF PTR_SIZE_BYTES
#define NOTIFY_OFF (2 * PTR_SIZE_BYTES)

// Offsets for ring_buffer struct (32 bit members)

#define WRITE_IDX 0
#define READ_IDX BBYTES32
#define BUFF_START BBYTES64

// Offsets for buffer descriptors

#define ENCODED_ADDR 0
#define LEN PTR_SIZE_BYTES
#define COOKIE (2 * PTR_SIZE_BYTES)

// Initialise the shared ring buffer
// @param ring- address to ring handle to use
// @param avail- pointer to avail ring in shared memory
// @param used- pointer to used ring in shared memory
// @param notify- function pointer used to notify the other user
// @param buffer_init- 1 indicates the read and write indices in shared memory 
                    //   need to be initialised
                    // 0 indicates they do not. Only one side of the shared memory 
                    //   regions needs to do this


fun ring_init(1 ring, 1 avail, 1 used, 1 notify, 1 buffer_init) {


    !stw    used , ring + USED_OFF;                // Offset for used_ring ptr
    !stw    avail , ring + AVAIL_OFF;              // Offset for avail_ring ptr
    !stw    notify , ring + NOTIFY_OFF;            // Offset for notify
    
    /*if buffer_init == 1 {
        !st8    0 , used + WRITE_IDX;               // ring -> used_ring -> write_idx = 0
        !st8    0 , used + WRITE_IDX + 1;
        !st8    0 , used + WRITE_IDX + 2;
        !st8    0 , used + WRITE_IDX + 3;
        !st8    0 , used + READ_IDX;                // ring -> used_ring -> read_idx = 0
        !st8    0 , used + READ_IDX + 1;
        !st8    0 , used + READ_IDX + 2;
        !st8    0 , used + READ_IDX + 3;
        !st8    0 , avail + WRITE_IDX;              // ring -> avail_ring -> write_idx = 0
        !st8    0 , avail + WRITE_IDX + 1;
        !st8    0 , avail + WRITE_IDX + 2;
        !st8    0 , avail + WRITE_IDX + 3;
        !st8    0 , avail + READ_IDX;               // ring -> avail_ring -> read_idx = 0
        !st8    0 , avail + READ_IDX + 1;
        !st8    0 , avail + READ_IDX + 2;
        !st8    0 , avail + READ_IDX + 3;
    }*/

} 

fun ring_empty(1 ring_buf) {


    // Mod ring size by BUFFSIZE -> 512 = 2^9

    var 1 ring_size = ring_size(ring_buf);

    var 1 has_filled = mod_2_n(ring_size , LOGBUFFSIZE);

    return has_filled == 0;

}


fun ring_full(1 ring_buf) {

    // Mod ring size + 1 by BUFFSIZE-> 512 = 2^9

    var 1 ring_size = ring_size(ring_buf);

    var 1 has_empty = mod_2_n(ring_size + 1 , LOGBUFFSIZE);

    return has_empty == 0;


}

fun ring_size(1 ring_buf) {
    
    var 1 write_idx = get_write_idx(ring_buf);
    var 1 read_idx = get_read_idx(ring_buf);

    if (write_idx - read_idx < 0) {
        raise Err (write_idx - read_idx < 0);
    }

    return write_idx - read_idx;

}

fun notify(1 ring_handle) {

   return ring_handle; 

}

fun enqueue(1 ring_buf, 1 buffer, 1 len, 1 cookie_ptr) {

    if (buffer == 0) {
        raise Err buffer == 0;
    }

    var 1 full = ring_full(ring_buf);
    
    if full {

        return -1;

    }

    var ring_buffers = ring_buf + BUFF_START;

    var 1 curr_write_idx = get_write_idx(ring_buf);
    
    // POSSIBLE REPLACE WITH BITSHIFTING BY 9
    // var 1 idx_mod_size = mod_2_n(curr_write_idx, LOGBUFFSIZE);

    var idx_mod_size = 1 << 10;                   // 2^9 = 512
    idx_mod_size = idx_mod_size - 1;                // 2^9 - 1 = 511
    idx_mod_size = curr_write_idx & idx_mod_size;   // idx % 512;
    
    !stw buffer , ring_buffers + idx_mod_size + ENCODED_ADDR;
    !stw len , ring_buffers + idx_mod_size + LEN;
    !stw cookie_ptr , ring_buffers + idx_mod_size + COOKIE;

    // Thread memory release

    

    
    // Increment write idx

    inc_idx(ring_buf, 1);
    
    return 0;


}

/*

    Dequeue element to a ring buffer

    @param ring_buf - ring buffer to Dequeue from
    @param buffer_ptr - pointer to address of where to store buffer address
    @param len_ptr - pointer to variable to store length of data dequeued
    @param cookie_ptr - optional pointer to data required on dequeueing

    @return -1 when ring empty, 0 on success

*/

fun dequeue(1 ring_buf, 1 addr_ptr, 1 len_ptr, 1 cookie_ptr) {
    
    var 1 empty = ring_empty(ring_buf);

    if empty {
        
        return -1;

    }

    var ring_buffers = ring_buf + BUFF_START;
    var 1 curr_write_idx = get_write_idx(ring_buf);

    var idx_mod_size = 1 << 10;                   // 2^9 = 512
    idx_mod_size = idx_mod_size - 1;                // 2^9 - 1 = 511
    idx_mod_size = curr_write_idx & idx_mod_size;   // idx % 512

    // NULL ADDRESS SHOULD BE?

    var addr = 0;
    var len = 0;
    var cookie = 0;

    !ldw addr, ring_buffers + idx_mod_size + ENCODED_ADDR;

    if (addr == 0) {
        raise Err addr == 0;
    }

    !ldw len, ring_buffers + idx_mod_size + LEN;
    !ldw cookie, ring_buffers + idx_mod_size + COOKIE;

    !stw addr, addr_ptr;
    !stw len, len_ptr;
    !stw cookie, cookie_ptr;

    //Thread Memory Release


    // read_idx ++ 
    inc_idx(ring_buf, 0);

    return 0;

}

fun enqueue_avail(1 ring, 1 addr, 1 len, 1 cookie) {

    if (addr == 0) {
        raise Err addr == 0;
    }

    return enqueue(ring + AVAIL_OFF, addr, len, cookie);
}

fun enqueue_used(1 ring, 1 addr, 1 len, 1 cookie) {

    if (addr == 0) {
        raise Err addr == 0;
    }

    return enqueue(ring + USED_OFF, addr, len, cookie);

}

fun dequeue_avail(1 ring, 1 addr_ptr, 1 len_ptr, 1 cookie_ptr) {
    
    return dequeue(ring + AVAIL_OFF, addr_ptr, len_ptr, cookie_ptr);

}

fun dequeue_used(1 ring, 1 addr_ptr, 1 len_ptr, 1 cookie_ptr) {
    
    return dequeue(ring + USED_OFF, addr_ptr, len_ptr, cookie_ptr);

}

/*
    Dequeue element from ring buffer.

    Dequeue intended for use by the driver, to collect pointer into this
    buffer structure to be passed around as a cookie.

    @param ring_buf - ring buffer to dequeue from
    @param addr_ptr - pointer to address of where to store buffer address
    @param len_ptr - pointer to variable to store length of data dequeueing
    @param cookie_ptr - pointer to store a pointer to this particular buffer entry

*/

fun driver_dequeue(1 ring_buf, 1 addr_ptr, 1 len_ptr, 1 cookie_ptr) {

    var 1 empty = ring_empty(ring_buf);

    if (empty) {

        return -1;

    }


    var ring_buffers = ring_buf + BUFF_START;
    var 1 curr_write_idx = get_write_idx(ring_buf);

    var idx_mod_size = 1 << 10;                   // 2^9 = 512
    idx_mod_size = idx_mod_size - 1;                // 2^9 - 1 = 511
    idx_mod_size = curr_write_idx & idx_mod_size;   // idx % 512

    // NULL ADDRESS SHOULD BE?

    var addr = 0;
    var len = 0;
    var cookie = ring_buffers + idx_mod_size;

    !ldw addr, ring_buffers + idx_mod_size + ENCODED_ADDR;
    !ldw len, ring_buffers + idx_mod_size + LEN;

    !stw addr, addr_ptr;
    !stw len, len_ptr;
    !stw cookie, cookie_ptr;

    //Thread Memory Release


    // read_idx ++ 
    inc_idx(ring_buf, 0);

    return 0;

}


// Helper function that gets the idx of write slot in ring buffer

fun get_write_idx(1 ring_buf) {
    
    // init temporary

    var write_idx = 0;
    var temp = 0;
    
    // Bytes from MS to LS
    var fst_b = ring_buf + WRITE_IDX + 3;
    var snd_b = ring_buf + WRITE_IDX + 2;
    var thd_b = ring_buf + WRITE_IDX + 1;
    var fth_b = ring_buf + WRITE_IDX;

    !st8 fst_b , temp;
    write_idx = write_idx | (temp << 24);
    !st8 snd_b , temp;  
    write_idx = write_idx | (temp << 16);
    !st8 thd_b , temp;
    write_idx = write_idx | (temp << 8);
    !st8 fth_b , temp;
    write_idx = write_idx | temp;

    return write_idx;
}

// Helper function that gets the idx of read slot in ring buffer

fun get_read_idx(1 ring_buf) {

    // init temporary

    var read_idx = 0;
    var temp = 0;

    // Bytes from MS to LS

    var fst_b = ring_buf + READ_IDX + 3;
    var snd_b = ring_buf + READ_IDX + 2;
    var thd_b = ring_buf + READ_IDX + 1;
    var fth_b = ring_buf + READ_IDX;
    
    !st8 fst_b , temp;
    read_idx = read_idx | (temp << 24);
    !st8 snd_b , temp;  
    read_idx = read_idx | (temp << 16);
    !st8 thd_b , temp;
    read_idx = read_idx | (temp << 8);
    !st8 fth_b , temp;
    read_idx = read_idx | temp;

    return read_idx;
}

// Helper function that sets the idx of write slot in ring buffer

fun set_write_idx(1 ring_buf , 1 int32) {
        
    
    // Bytes from MS to LS

    var fst_b = (int32 >> 24) & BYTEMASK;
    var snd_b = (int32 >> 16) & BYTEMASK;
    var thd_b = (int32 >> 8) & BYTEMASK;
    var fth_b = int32 & BYTEMASK;


    !st8 fst_b , ring_buf + WRITE_IDX + 3;
    !st8 snd_b , ring_buf + WRITE_IDX + 2;
    !st8 thd_b , ring_buf + WRITE_IDX + 1;
    !st8 fth_b , ring_buf + WRITE_IDX;

    return 0;

}

// Helper function that sets the idx of read slow in ring buffer

fun set_read_idx(1 ring_buf , 1 int32) {

    // Bytes from MS to LS

    var fst_b = (int32 >> 24) & BYTEMASK;
    var snd_b = (int32 >> 16) & BYTEMASK;
    var thd_b = (int32 >> 8) & BYTEMASK;
    var fth_b = int32 & BYTEMASK;


    !st8 fst_b , ring_buf + READ_IDX + 3;
    !st8 snd_b , ring_buf + READ_IDX + 2;
    !st8 thd_b , ring_buf + READ_IDX + 1;
    !st8 fth_b , ring_buf + READ_IDX;

    return 0;

}

// Helper function for incrementing read/write idx (indicated by flag). 1 for write 0 for read.

fun inc_idx(1 ring_buf, 1 rd_wr_flag) {

    var curr_idx = 0;

    if rd_wr_flag {
        
        curr_idx = get_write_idx(ring_buf);

        // Check for curr_idx 32 bit overflow?

        set_write_idx(ring_buf, curr_idx + 1);

        return 0;

    } else {
    
        curr_idx = get_read_idx(ring_buf);

        set_read_idx(ring_buf, curr_idx + 1);

        return 0;

    }

}


// Returns ring -> used buffer 

fun get_used(1 ring_handle) {
    
    return ring_handle + USED_OFF;

}

// Returns ring -> available buffer

fun get_avail(1 ring_handle) {

    return ring_handle + AVAIL_OFF;

}




 



// Auxiliary Functions

// Helper function that returns modulus of operand MOD 2^n 

fun mod_2_n(1 operand, 1 n) {
    
    var power = 1;

    // Get 2 ^ n

    while n + 1 > 0 {
        power = power << 1;
        n = n - 1;
    }

    return operand & (power - 1);

}



